"Develop a toolkit for debugging OS processes, offering an immersive way to visualize system states."

Provide the following details to help me implement this project:

1. Project Overview
Goals: The goal is to create a toolkit that assists developers and system administrators in debugging operating system processes by providing an immersive, interactive visualization of system states. This includes tracking process details (e.g., PID, state, CPU/memory usage), identifying issues like bottlenecks or crashes, and offering real-time insights.
Expected Outcomes: A user-friendly tool with a graphical interface that displays process states dynamically, highlights anomalies (e.g., high resource usage, deadlocks), and allows users to interact with the system for debugging purposes.
Scope: The project focuses on process monitoring and visualization within a single OS instance. It includes real-time data collection, graphical representation, and basic debugging features (e.g., pausing processes, viewing logs). Advanced features like distributed systems or kernel-level debugging are out of scope for this initial version.
2. Module-Wise Breakdown
The project can be divided into three distinct modules:

Module 1: Data Collection Engine
Purpose: Gathers real-time data about OS processes (e.g., PID, state, CPU usage, memory consumption).
Role: Acts as the backbone of the toolkit, providing raw data for visualization and analysis.
Module 2: Visualization Interface
Purpose: Presents an immersive, graphical view of system states using charts, graphs, or 3D representations.
Role: Translates raw data into an intuitive, interactive format for users to monitor and debug processes.
Module 3: Debugging Utilities
Purpose: Offers tools to interact with processes (e.g., pause, terminate, log details) and diagnose issues.
Role: Enhances the toolkit’s functionality by enabling actionable debugging based on visualized data.
3. Functionalities
Module 1: Data Collection Engine
Collect process data (e.g., PID, priority, CPU/memory usage) every few seconds.
Example: Retrieve a list of processes with details like “PID: 1234, State: Running, CPU: 12%, Memory: 256 MB.”
Detect changes in process states (e.g., Running → Waiting).
Module 2: Visualization Interface
Display a real-time Gantt chart or 3D process map showing process states and resource usage.
Example: A color-coded graph where green = Running, yellow = Waiting, red = Terminated.
Allow zooming into specific processes for detailed views (e.g., memory allocation over time).
Module 3: Debugging Utilities
Enable pausing/terminating a process via the interface.
Example: Right-click a process in the visualization to “Pause” or “View Logs.”
Log process events (e.g., “PID 1234 crashed at 10:05 AM”) for later analysis.
4. Technology Recommendations
Programming Languages:
Python: Ideal for rapid development, OS interaction (via psutil), and visualization libraries.
C++: Optional for performance-critical parts (e.g., low-level OS interaction).
Libraries and Tools:
psutil (Python): For process data collection (CPU, memory, state).
PyQt or Tkinter: For building the GUI (Visualization Interface).
Matplotlib or Plotly: For real-time graphs and immersive visualizations.
OpenGL (optional): For 3D process state rendering.
Git: For version control on GitHub.
Other Tools:
GitHub: To maintain revisions and the Read-Me.
VS Code: As an IDE for coding and debugging.